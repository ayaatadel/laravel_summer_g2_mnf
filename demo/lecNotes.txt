/**
==> realations
==> component
==> pagination
==> validations

*/


1-realations between tables =>
==> unary realations  => self
==> binary relation  => between two tables
==> ternary relation  => between more than two tables


==> one to one  ==> primary key
==> one to many   ==> primary key of one put in table of many
==> many to many   ==>  primary key of two tables and put them in new table


==> laravel handle relation (data base)
==> migration , model
==> migration --> column of id (primary key or foreign key)


************* laravel documentation => relation one to many
https://laravel.com/docs/11.x/eloquent-relationships#one-to-many

===> track , student => one to many
==> only student apply  in one track
==> track has many students

/*****************  laravel documentation add foreign key in migration  ====================

==> primary key of track put it as foreign key in student table


/********************************
Validation On Data That we take from user
// and handle error message

https://laravel.com/docs/11.x/validation#main-content



/***************   task
==> show => student => display track name
== show => track => diaplay all students in this track

== handle code of image for student and track




=== day5
component
/*
==  php artisan make:component ButtonComponent
*************************************************
component =>code ==> i use in more places
==> repetion => component => use this component using name

===> https://laravel.com/docs/11.x/blade#components
*/


==>seeder=> يغذي
https://laravel.com/docs/11.x/seeding#writing-seeders
php artisan make:seeder TrackSeeder

== run seeder
php artisan db:seed --class=TrackSeeder


===>factory  =>  يصنع
https://laravel.com/docs/11.x/eloquent-factories#generating-factories
create factory==> php artisan make:factory TrackFactory




pagination

// number of tracks
controller=>index==> paginate(5);
===> app service provider ==> pagination => bootstrap4 , bootstrap5
==> Traks->links()

https://laravel.com/docs/11.x/pagination#paginator-instance-methods


api
// appplication program interface (link)
// api => return data not view
api => database
controller , migration , model ,seeder , factory

bofore => version => file in routes with name api
==> deal with api => install api=> php artisan install:api
===> handle routes in api => install postman
https://www.postman.com/downloads/
